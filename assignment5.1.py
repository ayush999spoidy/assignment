# -*- coding: utf-8 -*-
"""assignment5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1INS8Dtv6tJGNt0avZOU95NICD3oq5C3U

1.Explain the purpose and advantages of NumPy in scientific computing and data analysis. How does it enhance Python's capabilities for numerical operations

Ans. NumPy has become necessary for scientific computing and data analysis and it is build by "C" language due to its powerful array structure, speed, mathematical,compatibility and manipulate data easiest ways with other scientific libraries, transforming Python into a high-performance language for numerical computation.Python by itself it works fast numerical operations on large datasets, primarily due to the nature of Python native data types and its interpreted nature. its providing fast execution and reducing code complecity.

2.Compare and contrast np.mean() and np.average() functions in NumPy. When would you use one over the other?

Ans.The np.mean() and np.average() functions in NumPy both used to compute the average of an array, but they differ in functionality and use cases
1. np.mean() is simpler and suitable for unweighted data.
2. np.average() is more flexible, allowing both weighted and unweighted averages
"""

import numpy as np

data = np.array([1, 2, 3, 4, 5])
weights = np.array([1, 2, 3, 4, 5])

s = np.mean(data)
print("Mean:", s)

h = np.average(data)
print("Average (no weights):", h)

a= np.average(data, weights=weights)
print("Weighted Average:",a)

"""3.Describe the methods for reversing a NumPy array along different axes. Provide examples for 1D and 2D
arrays.

Ans.In NumPy, you can reverse an array along different axes using slicing

1d array-- Simply slice the array with [::-1] to reverse order of elements
2d array -- Use slicing along specific axes to reverse rows or columns
"""

array_1d = np.array([1, 2, 3, 4, 5])

array_1d

rever_1d = array_1d[::-1]
print("1D reversed:", rever_1d)

array_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

array_2d

reversed_rows = array_2d[::-1, :]
print("2D Array with Rows Reversed:\n", reversed_rows)

reversed_columns = array_2d[:, ::-1]
print("2D Array with Columns Reversed:\n", reversed_columns)

"""4. How can you determine the data type of elements in a NumPy array? Discuss the importance of data types in memory management and performance

Ans.we can use the .dtype attribute To determine the data type of elements in a NumPy array selecting the right data type in NumPy directly affects memory usage, processing speed, and numerical accuracy. Using .dtype to check and modify data types helps manage in scientific computing and data analysis.
"""

array = np.array([1, 2, 3])
array.dtype

"""5. Define ndarrays in NumPy and explain their key features. How do they differ from standard Python lists?

Ans in python ndarray means n-dimensial, is the fundamental data structure used to store and manipulate numerical data it is flexible but slower for numerical operations.An ndarray can represent data of any dimension (1D, 2D, 3D, etc.),
ndarray is homogenous in nature and python list hetrogenous in nature, in ndarrayBroad set of mathematical operations anfd in python list Limited requires libraries or custom functions
"""

array = np.array([1, 2, 3, 4])

print(array)
print( array.dtype)

python_list = [1, 2, 3, 4]

print(python_list)

"""6.Analyze the performance benefits of NumPy arrays over Python lists for large-scale numerical operations

Ans.NumPy arrays offer significant performance advantages over Python lists, especially for large-scale numerical operations. This performance boost stems from several core features of ndarray in NumPy, including memory efficiency, optimized operations, and the ability to leverage low-level optimizations.
"""

size = 10
list1 = list(range(size))
list2 = list(range(size))

list1
list2

np_array1 = np.arange(size)
np_array2 = np.arange(size)

np_array1
np_array2

"""7. Compare vstack() and hstack() functions in NumPy. Provide examples demonstrating their usage and
output.

Ans.These functions are commonly used in data processing tasks where you need to combine data row-wise or column-wise.
vstacks arrays vertically,Same number of columns,Increases row count,
hstacks arrays horizontally	Same number of rows	Increases column count
"""

array1 = np.array([[1, 2], [3, 4]])
array2 = np.array([[5, 6], [7, 8]])

result_vstack = np.vstack((array1, array2))
print("Result of np.vstack:\n", result_vstack)

result_hstack = np.hstack((array1, array2))
print("Result of np.hstack:\n", result_hstack)

"""8. Explain the differences between fliplr() and flipud() methods in NumPy, including their effects on various
array dimensions.

Ans.In NumPy, the fliplr() and flipud() methods are used to reverse arrays along specific axes, but they operate differently.\\
np.flipud() flips arrays along the vertical axis, changing the order of rows from top to bottom.
np.fliplr() flips arrays along the horizontal axis, changing the order of columns from left to right.
"""

array_2d = np.array([[1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9]])

result_fliplr = np.fliplr(array_2d)
print( array_2d)
print( result_fliplr)

result_flipud = np.flipud(array_2d)
print( array_2d)
print( result_flipud)

"""9.Discuss the functionality of the array_split() method in NumPy. How does it handle uneven splits?

Ans.array_split() is flexible, accommodating both even and uneven splits.
For uneven splits, the extra elements are added to the first few sub-arraysarray_split() is particularly useful when the number of elements doesnâ€™t evenly divide by the number of sections, unlike split(), which requires even splits and will raise an error if not divisible.
"""

array = np.array([1, 2, 3, 4, 5,])
result = np.array_split(array, 3)
print( result)

"""10.Explain the concepts of vectorization and broadcasting in NumPy. How do they contribute to efficient array
operations?

Ans.Vectorization eliminates loops and takes advantage of optimized low-level code, improving speed and readability,vectorization and broadcasting allow NumPy to handle large datasets and complex computations efficiently, making it a powerful tool for scientific computing and data analysis,Broadcasting enables operations on arrays of differing shapes, saving memory and enhancing flexibility in array manipulations.
"""

array1 = np.array([1, 2, 3, 4])
array2 = np.array([5, 6, 7, 8])

result = array1 + array2  #Vectorized addition
print(result)

array = np.array([1, 2, 3])

scalar = 1

result = array + scalar
print(result)

"""11. Create a 3x3 NumPy array with random integers between 1 and 100. Then, interchange its rows and columns

Ans.
"""

n=np.random.randn(3,3)

n

transposed_array = np.transpose(n)

print( n)

print( transposed_array)

"""12. Generate a 1D NumPy array with 10 elements. Reshape it into a 2x5 array, then into a 5x2 array.

Ans.
"""

one_d_array = np.arange(10)

one_d_array

array_2x5 = one_d_array.reshape(2, 5)
array_2x5

array_5x2 = one_d_array.reshape(5, 2)
array_5x2

"""13.Create a 4x4 NumPy array with random float values. Add a border of zeros around it, resulting in a 6x6 array

Ans.
"""

random_float_array = np.random.rand(4, 4)

print(random_float_array)

bordered_array = np.pad(random_float_array, pad_width=1, mode='constant', constant_values=0)

print("Original 4x4 Array:")
print(random_float_array)

print("\n6x6 Array with Border of Zeros:")
print(bordered_array)

"""14.Using NumPy, create an array of integers from 10 to 60 with a step of 5

Ans.
"""

int_array = np.arange(10, 60, 5)

int_array

"""15. Create a NumPy array of strings ['python', 'numpy', 'pandas']. Apply different case transformations
(uppercase, lowercase, title case, etc.) to each element

Ans.
"""

str_array = np.array(['python', 'numpy', 'pandas'])

print(str_array)

upper_case = np.char.upper(str_array)
upper_case

lower_case = np.char.lower(str_array)
lower_case

title_case = np.char.title(str_array)
title_case

capitalize_case = np.char.capitalize(str_array)
capitalize_case

"""16. Generate a NumPy array of words. Insert a space between each character of every word in the array.

Ans.
"""

words_array = np.array(['python', 'function', 'ayush', 'pwkills', 'life'])

words_array

spaced_words_array = np.char.join(' ', words_array)

spaced_words_array

"""17. Create two 2D NumPy arrays and perform element-wise addition, subtraction, multiplication, and division.#

Ans.
"""

array1 = np.array([[8, 7, 3],
                   [1, 5, 2],
                   [5, 4, 3]])

array2 = np.array([[6, 5, 7],
                   [2, 8, 3],
                   [9, 1, 2]])

array1

array2

array1+array2

array1-array2

array1*array2

array1/array2

"""18. Use NumPy to create a 5x5 identity matrix, then extract its diagonal elements.

Ans.
"""

identity_matrix = np.eye(5)
identity_matrix

diagonal_elements = np.diag(identity_matrix)

diagonal_elements

"""19. Generate a NumPy array of 100 random integers between 0 and 1000. Find and display all prime numbers in
this array

Ans.
"""

random_integers = np.random.randint(0, 1001, size=100)

random_integers

from sympy import isprime
prime_num = [num for num in random_integers if isprime(num)]

prime_num

random_integers

"""20.Create a NumPy array representing daily temperatures for a month. Calculate and display the weekly
averages.

Ans.
"""

daily_temperatures = np.random.uniform(5, 15, size=20)

daily_temperatures

weekly_averages = np.mean(daily_temperatures[:20].reshape(-1, 5), axis=1)

weekly_averages

daily_temperatures